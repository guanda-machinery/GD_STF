using DevExpress.Mvvm.UI.Interactivity;
using DevExpress.Xpf.LayoutControl;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace WPFSTD105.FluentAPI
{
    /// <summary>
    /// For LayoutControl
    /// </summary>
    public class MecSettingBehavior : Behavior<DataLayoutControl>
    {
        /// <summary>
        /// 允許自定義
        /// </summary>
        public bool AllowCustomization
        {
            get { return (bool)GetValue(AllowCustomizationProperty); }
            set { SetValue(AllowCustomizationProperty, value); }
        }
        /// <summary>
        /// <see cref="AllowCustomization"/> 註冊為依賴屬性
        /// </summary>
        public static readonly DependencyProperty AllowCustomizationProperty =
            DependencyProperty.Register(nameof(AllowCustomization), typeof(bool), typeof(MecSettingBehavior), new PropertyMetadata(true, new PropertyChangedCallback(AllowCustomizationChanged)));

        /// <summary>
        /// <see cref="AllowCustomization"/> 變更時觸發
        /// </summary>
        /// <param name="d"></param>
        /// <param name="e"></param>
        /// <exception cref="NotImplementedException"></exception>
        private static void AllowCustomizationChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            ((MecSettingBehavior)d).OnAllowCustomizationChanged();
        }
        /// <summary>
        /// 允許自定義已更改
        /// </summary>
        void OnAllowCustomizationChanged()
        {
            if (AssociatedObject != null && AssociatedObject.IsCustomization && !AllowCustomization)
                AssociatedObject.Controller.CustomizationController.SelectedElements.Clear();//關聯的對象控制器定制控制器清除。
        }
        public FrameworkElement SelectedItem
        {
            get { return (FrameworkElement)GetValue(SelectedItemProperty); }
            set { SetValue(SelectedItemProperty, value); }
        }
        public static readonly DependencyProperty SelectedItemProperty =
           DependencyProperty.Register("SelectedItem", typeof(FrameworkElement), typeof(MecSettingBehavior), new PropertyMetadata(null));
        /// <summary>
        /// 附加
        /// </summary>
        protected override void OnAttached()
        {
            base.OnAttached();
            AssociatedObject.IsCustomizationChanged += OnIsCustomizationChanged;
            AssociatedObject.AutoGeneratedUI += OnAutoGeneratedUI;
            AssociatedObject.AutoGeneratingItem += AssociatedObject_AutoGeneratingItem;
        }
        /// <summary>
        /// 釋放資源
        /// </summary>
        protected override void OnDetaching()
        {
            AssociatedObject.IsCustomizationChanged -= OnIsCustomizationChanged;
            AssociatedObject.AutoGeneratedUI -= OnAutoGeneratedUI;
            AssociatedObject.AutoGeneratingItem -= AssociatedObject_AutoGeneratingItem;
            base.OnDetaching();
        }
        /// <summary>
        /// 允許您在自動生成完成後自定義佈局項。
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <exception cref="NotImplementedException"></exception>
        private void AssociatedObject_AutoGeneratingItem(object sender, DataLayoutControlAutoGeneratingItemEventArgs e)
        {

        }
        /// <summary>
        /// 允許在自動生成佈局後自定義佈局。
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <exception cref="NotImplementedException"></exception>
        private void OnAutoGeneratedUI(object sender, EventArgs e)
        {
            if (AssociatedObject.AutoGeneratedItemsLocation == DataLayoutControlAutoGeneratedItemsLocation.AvailableItems)
                AssociatedObject.IsCustomization = true;
        }

        /// <summary>
        /// 當 DevExpress.Xpf.LayoutControl.LayoutControl.IsCustomization 屬性的值改變了。
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// <exception cref="NotImplementedException"></exception>
        private void OnIsCustomizationChanged(object sender, EventArgs e)
        {
            if (AssociatedObject.IsCustomization)
                AssociatedObject.Controller.CustomizationController.SelectionChanged += layoutItems_SelectionChanged;
            else
                AssociatedObject.Controller.CustomizationController.SelectionChanged -= layoutItems_SelectionChanged;
            SelectedItem = null;
        }
        void layoutItems_SelectionChanged(object sender, LayoutControlSelectionChangedEventArgs e)
        {
            if (e.SelectedElements.Count == 1 && e.SelectedElements[0] is DataLayoutItem)
                SelectedItem = e.SelectedElements[0];
            else
                SelectedItem = null;
        }
    }
}
