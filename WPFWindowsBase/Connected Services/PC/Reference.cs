//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFWindowsBase.PC {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PC.IPC_OperatingDatabase")]
    public interface IPC_OperatingDatabase {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperatingDatabase/SoftwareModel", ReplyAction="http://tempuri.org/IOperatingDatabase/SoftwareModelResponse")]
        string[] SoftwareModel(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperatingDatabase/SoftwareModel", ReplyAction="http://tempuri.org/IOperatingDatabase/SoftwareModelResponse")]
        System.Threading.Tasks.Task<string[]> SoftwareModelAsync(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/CompanyAccount", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/CompanyAccountResponse")]
        bool CompanyAccount(string account, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/CompanyAccount", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/CompanyAccountResponse")]
        System.Threading.Tasks.Task<bool> CompanyAccountAsync(string account, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/GetUserAccount", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/GetUserAccountResponse")]
        System.Data.DataSet GetUserAccount(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/GetUserAccount", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/GetUserAccountResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetUserAccountAsync(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/NewUserAccount", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/NewUserAccountResponse")]
        void NewUserAccount(System.Data.DataSet dataSet, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/NewUserAccount", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/NewUserAccountResponse")]
        System.Threading.Tasks.Task NewUserAccountAsync(System.Data.DataSet dataSet, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/UploadData", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/UploadDataResponse")]
        void UploadData(string zipPath, byte[] pdfData, bool complete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/UploadData", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/UploadDataResponse")]
        System.Threading.Tasks.Task UploadDataAsync(string zipPath, byte[] pdfData, bool complete);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/GetServerDataPath", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/GetServerDataPathResponse")]
        string GetServerDataPath(string account, string projectName, string dataName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/GetServerDataPath", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/GetServerDataPathResponse")]
        System.Threading.Tasks.Task<string> GetServerDataPathAsync(string account, string projectName, string dataName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/MatchStream", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/MatchStreamResponse")]
        string MatchStream(string pdfPath, string csvPath, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/MatchStream", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/MatchStreamResponse")]
        System.Threading.Tasks.Task<string> MatchStreamAsync(string pdfPath, string csvPath, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/DeleteData", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/DeleteDataResponse")]
        void DeleteData(string account, string projectName, string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/DeleteData", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/DeleteDataResponse")]
        System.Threading.Tasks.Task DeleteDataAsync(string account, string projectName, string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/GetProjects", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/GetProjectsResponse")]
        string[] GetProjects(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPC_OperatingDatabase/GetProjects", ReplyAction="http://tempuri.org/IPC_OperatingDatabase/GetProjectsResponse")]
        System.Threading.Tasks.Task<string[]> GetProjectsAsync(string account);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPC_OperatingDatabaseChannel : WPFWindowsBase.PC.IPC_OperatingDatabase, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PC_OperatingDatabaseClient : System.ServiceModel.ClientBase<WPFWindowsBase.PC.IPC_OperatingDatabase>, WPFWindowsBase.PC.IPC_OperatingDatabase {
        
        public PC_OperatingDatabaseClient() {
        }
        
        public PC_OperatingDatabaseClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PC_OperatingDatabaseClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PC_OperatingDatabaseClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PC_OperatingDatabaseClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] SoftwareModel(string account) {
            return base.Channel.SoftwareModel(account);
        }
        
        public System.Threading.Tasks.Task<string[]> SoftwareModelAsync(string account) {
            return base.Channel.SoftwareModelAsync(account);
        }
        
        public bool CompanyAccount(string account, string password) {
            return base.Channel.CompanyAccount(account, password);
        }
        
        public System.Threading.Tasks.Task<bool> CompanyAccountAsync(string account, string password) {
            return base.Channel.CompanyAccountAsync(account, password);
        }
        
        public System.Data.DataSet GetUserAccount(string account) {
            return base.Channel.GetUserAccount(account);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetUserAccountAsync(string account) {
            return base.Channel.GetUserAccountAsync(account);
        }
        
        public void NewUserAccount(System.Data.DataSet dataSet, string account) {
            base.Channel.NewUserAccount(dataSet, account);
        }
        
        public System.Threading.Tasks.Task NewUserAccountAsync(System.Data.DataSet dataSet, string account) {
            return base.Channel.NewUserAccountAsync(dataSet, account);
        }
        
        public void UploadData(string zipPath, byte[] pdfData, bool complete) {
            base.Channel.UploadData(zipPath, pdfData, complete);
        }
        
        public System.Threading.Tasks.Task UploadDataAsync(string zipPath, byte[] pdfData, bool complete) {
            return base.Channel.UploadDataAsync(zipPath, pdfData, complete);
        }
        
        public string GetServerDataPath(string account, string projectName, string dataName) {
            return base.Channel.GetServerDataPath(account, projectName, dataName);
        }
        
        public System.Threading.Tasks.Task<string> GetServerDataPathAsync(string account, string projectName, string dataName) {
            return base.Channel.GetServerDataPathAsync(account, projectName, dataName);
        }
        
        public string MatchStream(string pdfPath, string csvPath, string account) {
            return base.Channel.MatchStream(pdfPath, csvPath, account);
        }
        
        public System.Threading.Tasks.Task<string> MatchStreamAsync(string pdfPath, string csvPath, string account) {
            return base.Channel.MatchStreamAsync(pdfPath, csvPath, account);
        }
        
        public void DeleteData(string account, string projectName, string ID) {
            base.Channel.DeleteData(account, projectName, ID);
        }
        
        public System.Threading.Tasks.Task DeleteDataAsync(string account, string projectName, string ID) {
            return base.Channel.DeleteDataAsync(account, projectName, ID);
        }
        
        public string[] GetProjects(string account) {
            return base.Channel.GetProjects(account);
        }
        
        public System.Threading.Tasks.Task<string[]> GetProjectsAsync(string account) {
            return base.Channel.GetProjectsAsync(account);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PC.IOperatingDatabase")]
    public interface IOperatingDatabase {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperatingDatabase/SoftwareModel", ReplyAction="http://tempuri.org/IOperatingDatabase/SoftwareModelResponse")]
        string[] SoftwareModel(string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperatingDatabase/SoftwareModel", ReplyAction="http://tempuri.org/IOperatingDatabase/SoftwareModelResponse")]
        System.Threading.Tasks.Task<string[]> SoftwareModelAsync(string account);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOperatingDatabaseChannel : WPFWindowsBase.PC.IOperatingDatabase, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OperatingDatabaseClient : System.ServiceModel.ClientBase<WPFWindowsBase.PC.IOperatingDatabase>, WPFWindowsBase.PC.IOperatingDatabase {
        
        public OperatingDatabaseClient() {
        }
        
        public OperatingDatabaseClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OperatingDatabaseClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperatingDatabaseClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperatingDatabaseClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] SoftwareModel(string account) {
            return base.Channel.SoftwareModel(account);
        }
        
        public System.Threading.Tasks.Task<string[]> SoftwareModelAsync(string account) {
            return base.Channel.SoftwareModelAsync(account);
        }
    }
}
